==========================================================================================
Table of Contents                                                     *kotlin.nvim.contents*

Introduction ··························································· |kotlin.nvim.intro|
Plugin Configuration ·················································· |kotlin.nvim.config|
LSP Extensions ···················································· |kotlin.nvim.extensions|
Toggle Hints ··························································· |kotlin.nvim.hints|

==========================================================================================

Introduction                                                       kotlin.nvim.intro*

This plugin provides advanced Kotlin support for Neovim, integrating with
`kotlin-ls`, JetBrains' Kotlin Language Server. It offers essential features
such as class file decompilation, workspace export, and diagnostic hint toggling.

==========================================================================================

LSP Extensions                                                      *kotlin.nvim.extensions*

kotlin.nvim includes additional extensions for Kotlin LSP:

M.open_classfile({fname})                                            *kotlin.open_classfile*
     Open `jdt://` or `jar://` URI, decompile class contents, and load them into the buffer.

    Parameters: ~
        {fname}  (string)

M.export_workspace_to_json()                               *kotlin.export_workspace_to_json*
    Export Kotlin LSP workspace as JSON to the current working directory.

==========================================================================================

Toggle Hints                                                             *kotlin.nvim.hints*

Toggle diagnostic hints provided by kotlin.nvim using the `KotlinHintsToggle`
command. This feature is useful for decluttering the editor interface.

Commands: ~

`:KotlinHintsToggle` - Enable or disable diagnostic hints dynamically.

==========================================================================================

Kotlin Package Oil Resolution                                         *kotlin.nvim.oil*

kotlin.nvim supports Kotlin package resolution, allowing you to easily
navigate to package folders declared in your Kotlin projects.

This feature leverages the LSP's (Language Server Protocol) "go to definition"
functionality: when you use "go to definition" (`gd`) on a package name, if
the LSP returns a response for the package—it jumps directly to the
corresponding package folder using an oil.nvim buffer.

Note: ~

No additional configuration is required for this feature. It works out of the box
if the LSP supports and returns a response for the package reference.

==========================================================================================

vim:tw=78:ts=8:noet:ft=help:norl:
